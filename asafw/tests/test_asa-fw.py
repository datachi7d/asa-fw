import os
import io
import pytest
import asafw.asafw as asafw
import uuid

raw_header_1 = b"\x11\xbb\x8dF\xd68\x01M\xa2k}fb\r\xfct`\xd0\x90\xeb\t\xf7\x1aJ\x9f0\x9eE\xf7(t\x90\x1a\x00\x00\x85\xc8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x01\x01\x02\x00\x04\x00\x00\x01\x8c\x03\x00q\x04\x000CN=CiscoSystems;OU=NCS_Kenton_ASA;O=CiscoSystems\x05\x00\x085AB844ED\x06\x000CN=CiscoSystems;OU=NCS_Kenton_ASA;O=CiscoSystems\x07\x00\x01\x00\x08\x00\x01\x01\t\x00\x01\x00\n\x00\x01\x01\x0b\x01\x00C\x9e]3c4\xac\xb3\xdb\x84\xdcw;\x18\xe4\xde\xbdx\x0f\x12y\x8c\xfaKy\xb5\xbb\x12&\xd5'\x1c\x05\x98\x05O\xc1\x9d|\xdes\xcfT\xb3J\xce<J\x83{\x8f\xbe\x83\x1c\xcf\xbc\xfc\xd7\xb0. \xa7Z\xbb\x1fD\xab\xd3_\x98\t2%\xa8\x95\x98+\x91d\xbf\xf0\xaf\x88(\xa7\xb0\xa6<~\x10\xa18o-\xd9\xf5\x84\xd1\xc3\x85\xb3\xeb,\x90\x16\x82\xb1,G\x8a\xf2\x8e#9\x7f\xed\xef7\x93'\xbcsn\x80\xddu\xf7\x9d!\x18N\t\x19\xf4O{\x1cj\xdbb{\xd8=1\xfe\x0c\xe4\x1a?\x8bg\x1c\xc5dE.\x8d\x99\xb4\x99\x06\xa1%\xb5\x03{\x0c\xbdm\xbfl^\xc1TD\xc3&b\xc8\x8epB\xa0\t\xeeM\xa1\x05\xc45\x08<\xe7\xc3}\xa2[cWz5\xabR\xc3\xe1\x9b\xf2J\xd3\x98W\xc3\xef\xe1:\n\x81\xd3\xe5\xd7\x1a\xfdGM\x1a\xe7O\xd8\x92_\xd0\xf7*\x1c\xe2\x99\xc6\xc7]f&U\xc0{U\x91\x91\xb5\xeb\x13\xed\xfd\xcd\xa7\xd9\xb5\x0c\x00\x01A\xeb\x00\x00\x00\x00\x00\x00\x00\x00qTj\x9d\xae'\xefB\x97\x98\xc3\xdf\xbe\r\xc5^\x02\x00\x00\x81\xc8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00[\x0cu\x0c\x99\x0cw\x0c\x9b\x0c\xba\x0c\xbb\x0c\xae\x0c\xaf\x0c\xc1\x0c\xc2\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81\x0e\x04\xc5.\xd1-G\x89!\xa0+\xb0\x00e5\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00root=/dev/ram quiet loglevel=0 auto kstack=128 reboot=force panic=1 processor.max_cstate=1 useCiscoDma \x00\x00\x00\x00\x00\x00\x00\x00\x00\x1aM\xbfG\x90|\xfcI\x90A\xcd\xeb\xa6\xc3\xf6G\x00\x00\x00\xed\x83^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
raw_header_2 = b"\x11\xbb\x8dF\xd68\x01M\xa2k}fb\r\xfct`\xd0\x90\xeb\t\xf7\x1aJ\x9f0\x9eE\xf7(t\x90\x1a\x00\x00\xb6\xa1\x9d\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x01\x01\x02\x00\x04\x00\x00\x01\x8c\x03\x00q\x04\x000CN=CiscoSystems;OU=NCS_Kenton_ASA;O=CiscoSystems\x05\x00\x0860A6A3E5\x06\x000CN=CiscoSystems;OU=NCS_Kenton_ASA;O=CiscoSystems\x07\x00\x01\x00\x08\x00\x01\x01\t\x00\x01\x00\n\x00\x01\x01\x0b\x01\x00\x87\x12z`\xbdx\x892\x8a`\xcf\x91\x1fGK\xd1\xf7\xb1\xe0\ta\xb8\xb7\xa7\x1d\x9fl\x80\x1b\xff\xa9\xd5s\xa7W\x97\xa5#E0\xd7\x1b\xaa\xc9\xa7\xf4\xa4\x8c\x88\xb7\xfe<\xc2@\x91Z\xfb10\xe5\xd0\xf0#e\xfd|c\x16f/\x1b/\xc5\x97\xfc[D\xdd\xc2A\xcb\xc61\xc6j\xf5-w~\\r\xd3\xd8]<\xa5{\xb1\xc9\xad\xe5=\xfb\xaa\x81NIg\xe7\xdd\x17{o\xcbdg?6t\x86\xc01:\x92\x10g\xb4L!8\x02\xd5\x04\x88\xa2\x81&\n\x9c\xde\xf9\x03m=A\r\x07\x11\x17X\x92\xd6\xaex\xd6\xe1\x11\xb3\xe1\xb1m\xa5\xf8\xc8\xa7\\\x7fl\x97\xa3\xd3Yu|\xcaU\xb7\x7f:\xe2\x82N7P\xa2\x96\xff\x03?\xc5\xf5\xcd|\x90\xf4m\xc67\xf0\xd7\xfeq[!\xd4\x1c\xa4\xf0\xbd\x81f\x9eJ>\x83\xf5%}\x8eX\xea\xcf\xd4\x88\xc5\xa5}F\x9a\xbd2\xf1\xbbA\xd0\xc7\x18a\x94\x9b\x96\x0bh\x14L\xa9u\xe5\x19\xfa\x96d\x1f\x01\xee\xbd\x0c\x00\x01A\xeb\x00\x00\x00\x00\x00\x00\x00\x00qTj\x9d\xae'\xefB\x97\x98\xc3\xdf\xbe\r\xc5^\x02\x00\x00\xb2\xa1\x9d\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00[\x0cu\x0c\x99\x0cw\x0c\x9b\x0c\xba\x0c\xbb\x0c\xae\x0c\xaf\x0c\xc1\x0c\xc2\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81\x0e\x04\xc5.\xd1-G\x89!\xa0+\xb0\x00e5\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00root=/dev/ram quiet loglevel=0 auto kstack=128 reboot=force panic=1 processor.max_cstate=1 useCiscoDma \x00\x00\x00\x00\x00\x00\x00\x00\x00\x1aM\xbfG\x90|\xfcI\x90A\xcd\xeb\xa6\xc3\xf6G\x00\x00\x00\xef\xa7\x91\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

def test_field1_header():
    header1 = asafw.asa_field1(raw_header_1[0x30:])
    assert(header1.field == 1)
    assert(header1.length == 2)
    assert(len(header1.data) == 2)

def test_parse_field1_headers():
    bin_file = io.BytesIO(raw_header_1)
    bin_file.seek(0x30, os.SEEK_SET)
    headers = asafw.parse_field1_headers(bin_file)
    assert(len(headers) == 9)

def test_serialize_field1_headers():
    header_2 = [
    asafw.asa_field1(field=1, data=b'\x01\x01'),
    asafw.asa_field1(field=2, data=b'\x00\x00\x01\x8c'),
    asafw.asa_field1(field=3, data=[
        asafw.asa_field1(field=4, data=b'CN=CiscoSystems;OU=NCS_Kenton_ASA;O=CiscoSystems'),
        asafw.asa_field1(field=5, data=b'60A6A3E5'),
        asafw.asa_field1(field=6, data=b'CN=CiscoSystems;OU=NCS_Kenton_ASA;O=CiscoSystems')]),
    asafw.asa_field1(field=7, data=b'\x00'),
    asafw.asa_field1(field=8, data=b'\x01'),
    asafw.asa_field1(field=9, data=b'\x00'),
    asafw.asa_field1(field=10, data=b'\x01'),
    asafw.asa_field1(field=11, data=b'\x87\x12z`\xbdx\x892\x8a`\xcf\x91\x1fGK\xd1\xf7\xb1\xe0\ta\xb8\xb7\xa7\x1d\x9fl\x80\x1b\xff\xa9\xd5s\xa7W\x97\xa5#E0\xd7\x1b\xaa\xc9\xa7\xf4\xa4\x8c\x88\xb7\xfe<\xc2@\x91Z\xfb10\xe5\xd0\xf0#e\xfd|c\x16f/\x1b/\xc5\x97\xfc[D\xdd\xc2A\xcb\xc61\xc6j\xf5-w~\\r\xd3\xd8]<\xa5{\xb1\xc9\xad\xe5=\xfb\xaa\x81NIg\xe7\xdd\x17{o\xcbdg?6t\x86\xc01:\x92\x10g\xb4L!8\x02\xd5\x04\x88\xa2\x81&\n\x9c\xde\xf9\x03m=A\r\x07\x11\x17X\x92\xd6\xaex\xd6\xe1\x11\xb3\xe1\xb1m\xa5\xf8\xc8\xa7\\\x7fl\x97\xa3\xd3Yu|\xcaU\xb7\x7f:\xe2\x82N7P\xa2\x96\xff\x03?\xc5\xf5\xcd|\x90\xf4m\xc67\xf0\xd7\xfeq[!\xd4\x1c\xa4\xf0\xbd\x81f\x9eJ>\x83\xf5%}\x8eX\xea\xcf\xd4\x88\xc5\xa5}F\x9a\xbd2\xf1\xbbA\xd0\xc7\x18a\x94\x9b\x96\x0bh\x14L\xa9u\xe5\x19\xfa\x96d\x1f\x01\xee\xbd'),
    asafw.asa_field1(field=12, data=b'A')]

    assert(raw_header_2[0x30:0x35] == header_2[0].pack())
    assert(raw_header_2[0x35:0x3c] == header_2[1].pack())
    assert(raw_header_2[0x3c:0xb0] == header_2[2].pack())

def test_gen_raw_field1_headers():
    data = asafw.gen_asa_raw_field1_headers()
    assert(len(data) == 0x198)
    assert(data == raw_header_2[0x30:0x1c8])

def test_block_header():
    header1 = asafw.asa_block(raw_header_1[0x10:0x30])
    assert(header1.meta_data_length == 0x1a)
    assert(header1.MetaDataLength == 0x1a0)
    assert(header1.sub_blocks == 1)
    assert(header1.data_length == 0x62c88500)
    assert(header1.DataLength == 0x62c8850)

def test_get_next_block():
    bin_file = io.BytesIO(raw_header_1)
    bin_file.seek(0x10, os.SEEK_SET)
    top_header, top_header_metadata_headers = asafw.parse_block(bin_file)

    assert(top_header.UUID == uuid.UUID('60d090eb-09f7-1a4a-9f30-9e45f7287490'))
    assert(isinstance(top_header_metadata_headers, list))
    assert(len(top_header_metadata_headers) == 9)
    assert(bin_file.tell() == 0x1d0)
    assert(top_header.HasSubBlocks)

    next_header, next_header_metadata = asafw.parse_block(bin_file)
    
    assert(next_header.UUID == uuid.UUID('71546a9d-ae27-ef42-9798-c3dfbe0dc55e'))
    assert(next_header.MetaDataLength == len(next_header_metadata))
    assert(len(next_header_metadata) == 32)

    next_header, next_header_metadata = asafw.parse_block(bin_file)
    assert(next_header.UUID == uuid.UUID('810e04c5-2ed1-2d47-8921-a02bb0006535'))
    assert(next_header.MetaDataLength == len(next_header_metadata))
    assert(len(next_header_metadata) == 112)

    next_header, next_header_metadata = asafw.parse_block(bin_file)
    assert(next_header.UUID == uuid.UUID('1a4dbf47-907c-fc49-9041-cdeba6c3f647'))
    assert(next_header.MetaDataLength == 0)
    assert(next_header_metadata is None)

def test_gen_block1():
    block_header = asafw.asa_block(UUID=asafw.UUID_MAIN_CONTAINER, HasSubBlocks=True, MetaDataLength=0x1a0, DataLength=0x62c8850)
    assert(block_header.pack() == raw_header_1[0x10:0x30])

    KernelParams_block = asafw.AsaBlock(
        asafw.asa_block(UUID=asafw.UUID_KERNEL_PARAMS), 
        meta_data=b'root=/dev/ram quiet loglevel=0 auto kstack=128 reboot=force panic=1 processor.max_cstate=1 useCiscoDma ', 
        data=None)

    bin_file = io.BytesIO()
    asafw.write_block(bin_file, KernelParams_block)
    output_bytes = bin_file.getvalue()
    assert(raw_header_1[0x210:0x2a0] == output_bytes)
    bin_file.close()

    FW_block = asafw.AsaBlock(
        asafw.asa_block(UUID=asafw.UUID_FW_CONTAINER, HasSubBlocks=True),
        meta_data=b'[\x0cu\x0c\x99\x0cw\x0c\x9b\x0c\xba\x0c\xbb\x0c\xae\x0c\xaf\x0c\xc1\x0c\xc2\x0c',
        data = [
            KernelParams_block,
            asafw.AsaBlock(asafw.asa_block(UUID=asafw.UUID_ROOTFS_FW_BLOCK),
            meta_data=None,
            data=io.BytesIO(bytearray(b'\x00') * 0x5e83ed0)
            ),
            asafw.AsaBlock(asafw.asa_block(UUID=asafw.UUID_BOOT_FW_BLOCK),
            meta_data=None,
            data=io.BytesIO(bytearray(b'\x00') * 0x444870)
            )
        ]
    )
    bin_file = io.BytesIO()
    asafw.write_block(bin_file, FW_block)
    output_bytes = bin_file.getvalue()
    assert(raw_header_1[0x1d0:0x2c0] == output_bytes[:(0x2c0-0x1d0)])
    bin_file.close()

    main_block = asafw.AsaBlock(
       asafw.asa_block(UUID=asafw.UUID_MAIN_CONTAINER, HasSubBlocks=True),  
       meta_data=asafw.gen_asa_raw_field1_headers(
           serial="5AB844ED",
           magic_key=b"C\x9e]3c4\xac\xb3\xdb\x84\xdcw;\x18\xe4\xde\xbdx\x0f\x12y\x8c\xfaKy\xb5\xbb\x12&\xd5'\x1c\x05\x98\x05O\xc1\x9d|\xdes\xcfT\xb3J\xce<J\x83{\x8f\xbe\x83\x1c\xcf\xbc\xfc\xd7\xb0. \xa7Z\xbb\x1fD\xab\xd3_\x98\t2%\xa8\x95\x98+\x91d\xbf\xf0\xaf\x88(\xa7\xb0\xa6<~\x10\xa18o-\xd9\xf5\x84\xd1\xc3\x85\xb3\xeb,\x90\x16\x82\xb1,G\x8a\xf2\x8e#9\x7f\xed\xef7\x93'\xbcsn\x80\xddu\xf7\x9d!\x18N\t\x19\xf4O{\x1cj\xdbb{\xd8=1\xfe\x0c\xe4\x1a?\x8bg\x1c\xc5dE.\x8d\x99\xb4\x99\x06\xa1%\xb5\x03{\x0c\xbdm\xbfl^\xc1TD\xc3&b\xc8\x8epB\xa0\t\xeeM\xa1\x05\xc45\x08<\xe7\xc3}\xa2[cWz5\xabR\xc3\xe1\x9b\xf2J\xd3\x98W\xc3\xef\xe1:\n\x81\xd3\xe5\xd7\x1a\xfdGM\x1a\xe7O\xd8\x92_\xd0\xf7*\x1c\xe2\x99\xc6\xc7]f&U\xc0{U\x91\x91\xb5\xeb\x13\xed\xfd\xcd\xa7\xd9\xb5"
       ),
       data=[FW_block]
    )
    bin_file = io.BytesIO()
    asafw.write_block(bin_file, main_block)
    output_bytes = bin_file.getvalue()
    assert(raw_header_1[0x10:0x2c0] == output_bytes[:0x2c0-0x10])
    bin_file.close()
